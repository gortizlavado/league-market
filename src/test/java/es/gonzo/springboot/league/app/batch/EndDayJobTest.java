package es.gonzo.springboot.league.app.batch;

import com.fasterxml.jackson.databind.ObjectMapper;
import es.gonzo.springboot.league.app.EndDayJobRunnerApplication;
import io.zonky.test.db.AutoConfigureEmbeddedDatabase;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.test.JobLauncherTestUtils;
import org.springframework.batch.test.JobRepositoryTestUtils;
import org.springframework.batch.test.context.SpringBatchTest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.stream.binder.test.OutputDestination;
import org.springframework.cloud.stream.binder.test.TestChannelBinderConfiguration;
import org.springframework.context.annotation.Import;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.messaging.Message;
import org.springframework.test.context.ContextConfiguration;

import java.time.Instant;
import java.util.Date;
import java.util.UUID;
import java.util.stream.IntStream;

@SpringBatchTest
@ContextConfiguration(classes = EndDayJobRunnerApplication.class)
@AutoConfigureEmbeddedDatabase
@Import(TestChannelBinderConfiguration.class)
public class EndDayJobTest {

    @Autowired
    JobLauncherTestUtils jobLauncherTestUtils;

    @Autowired
    JobRepositoryTestUtils jobRepositoryTestUtils;

    @Autowired
    JdbcTemplate jdbcTemplate;

    @Autowired
    OutputDestination output;

    @Autowired
    ObjectMapper objectMapper;

    @Autowired
    Job endOfDay;

    @Test
    void checkBatch() throws Exception {

        UUID lastOwnerId = UUID.randomUUID();
        UUID newOwnerId = UUID.randomUUID();
        UUID playerId = UUID.randomUUID();

        int numbers = 10;
        for (int i = 1; i <= numbers; i++) {
            if (i % 3 == 0) {
                playerId = UUID.randomUUID();
            }
            // If you really want to insert into identity column, you can use GENERATED BY DEFAULT instead of GENERATED ALWAYS.
            this.jdbcTemplate.update("insert into change_owner OVERRIDING SYSTEM VALUE values (?, ?, ?, ?, 'bc2c7992-d384-4065-a9d3-aa6cc59a9b9c', ?)",
                    i, playerId, lastOwnerId, newOwnerId, Date.from(Instant.now()));
        }

        JobExecution jobExecution = jobLauncherTestUtils.launchJob();

        IntStream.range(0, numbers).forEach(i -> Assertions.assertNotNull(pollMessage()));
        //ChangeOwnerRequest changeOwnerRequest = objectMapper.readValue(received.getPayload(), ChangeOwnerRequest.class);
        Assertions.assertNull(pollMessage());

        Assertions.assertEquals("COMPLETED", jobExecution.getExitStatus().getExitCode());
    }

    private Message<byte[]> pollMessage() {
        return output.receive(100L, "communityChannel-out-0");
    }

}
